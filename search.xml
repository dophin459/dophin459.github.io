<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[以太坊开发实战：Truffle开发环境配置及使用]]></title>
      <url>%2Fposts%2F6dfb7cf8%2F</url>
      <content type="text"><![CDATA[Truffle是一个以太坊智能合约开发框架，利用它可以方便地生成项目模板、编译合约、部署合约到区块链、测试合约等等。本篇文章介绍Truffle的安装过程以及基本使用。 Truffle安装系统环境：Ubuntu16.04 64位 一、安装 NodejsTruffle是一个nodejs模块，因此要先安装nodejs。进入nodejs网站，选择Linux Binaries 64bit下载最新版本的nodejs压缩包，这里以 node-v6.10.0-linux-x64.tar.gz 为例。 将下载的压缩包解压到某个目录下，比如 ~/tools 下：$ tar -C ~/tools -xzf node-v6.10.0-linux-x64.tar.gz 在系统目录下创建到node及npm可执行文件的软链接：$ sudo ln -s ~/tools/node-v6.10.0-linux-x64/bin/node /usr/local/bin/node$ sudo ln -s ~/tools/node-v6.10.0-linux-x64/bin/npm /usr/local/bin/npm 执行 node -v 以及 npm -v ，如果输出nodejs和npm的版本号，说明安装成功了。 二、配置npm源（可选）npm=node package manager，是nodejs的包管理器，nodejs模块都是通过npm来在线安装，很多安装包来自国外，由于网络管制原因，会导致一些包下载很慢甚至安装失败，因此建议把npm的源设置为国内源，用以下命令可以把npm源设置为淘宝镜像源：$ npm config set registry http://registry.npm.taobao.org 三、安装 git为保证truffle的正常安装，执行以下命令安装git：$ sudo apt-get install git 四、安装truffle通过npm安装，安装最新版：$ sudo npm install -g truffle 或安装指定版本：$ sudo npm install -g truffle@~2.1.1 其中@~2.1.1表示安装2.1.1&lt;=version&lt;2.2.0的最新版。 安装完成后在终端输入truffle，发现找不到命令，原因是truffle被安装到了~/tools/node-v6.10.0-linux-x64/bin中，而不是系统目录。为了让终端能识别truffle命令，需要创建一个软链接：$ sudo ln -s ~/tools/node-v6.10.0-linux-x64/bin/truffle /usr/local/bin/truffle 或者将~/tools/node-v6.10.0-linux-x64/bin加入到PATH环境变量中，在~/.bashrc文件最后加入一行：export PATH=$PATH:$HOME/tools/node-v6.10.0-linux-x64/bin 之后再输入truffle，就会显示truffle版本和用法，本例安装的是2.1.2版。 Truffle使用一、创建项目新建一个目录并进入该目录，然后创建项目：$ mkdir myContract &amp;&amp; cd myContract$ truffle init 执行truffle init后，会在当前目录生成一个项目模板，生成的项目目录结构如下：myContract├── app│ ├── images│ ├── index.html│ ├── javascripts│ │ └── app.js│ └── stylesheets│ └── app.css├── contracts│ ├── ConvertLib.sol│ ├── MetaCoin.sol│ └── Migrations.sol├── migrations│ ├── 1_initial_migration.js│ └── 2_deploy_contracts.js├── test│ └── metacoin.js└── truffle.js 其中app是生成的示例web应用代码，contracts下面存放合约代码，migrations里面是部署合约的脚本，test下面是测试脚本，truffle.js是项目的配置文件。 注：这是truffle 2.1.2生成的项目模板，目前truffle最新版3.1.2生成的项目模板中不再包含app目录。 二、编写合约编写合约代码，并把代码文件保存在contracts目录下，默认已经生成了一个示例合约MetaCoin.sol和ConvertLib.sol，如果不需要可以将它们删除，本例就使用默认的示例合约文件。 三、编译合约在终端中输入：$ truffle compile 如果出现类似如下输出，则编译成功：Compiling ConvertLib.sol...Compiling MetaCoin.sol...Compiling Migrations.sol...Writing artifacts to ./build/contracts 四、部署合约首先启动一个私有链节点，在终端中输入下面命令，进入geth控制台：$ geth --datadir chain0/data --networkid 1108 --rpc console 然后修改truffle.js文件，将其中rpc下面的host值改为节点的IP地址，port的值改为geth启动参数中的–rpcport参数值。// truffle.jsmodule.exports = &#123; build: &#123; "index.html": "index.html", "app.js": [ "javascripts/app.js" ], "app.css": [ "stylesheets/app.css" ], "images/": "images/" &#125;, rpc: &#123; host: "localhost", port: 8545 &#125;&#125;; 还要修改migrations/2_deploy_contracts.js，将deployer.deploy的参数中的合约名改为自己要部署的合约名：// migrations/2_deploy_contracts.jsmodule.exports = function(deployer) &#123; deployer.deploy(ConvertLib); deployer.autolink(); deployer.deploy(MetaCoin);&#125;; 接下来在geth控制台中输入以下命令，解锁账户然后让节点开始挖矿：&gt; personal.unlockAccount(eth.accounts[0])&gt; miner.start(1) 最后部署合约到区块链，在终端中执行：$ truffle migrate --reset 如果出现类似如下输出，则部署成功：... (省略)Running migration: 2_deploy_contracts.js Deploying ConvertLib... ConvertLib: 0x4d7032160ef9b300fb0cc83cad97819f89e6fc38 Linking ConvertLib to MetaCoin Deploying MetaCoin... MetaCoin: 0x3e16298422c552ac794c8a83f4fdae62c6bc2a20Saving successful migration to network...Saving artifacts... 五、测试合约进入truffle控制台调试合约合约部署成功后，在终端执行truffle console，可以进入Javascript控制台对合约进行调试：$ truffle consoletruffle(default)&gt; 在Javascript控制台通过ContractName.deployed()或ContractName.at(contractAddress)获取已部署的合约对象，之后就可以通过该对象调用合约的方法进行调试： 获取已部署的合约对象：truffle(default)&gt; var metacoin = MetaCoin.deployed() 首先查看第一个账户的MetaCoin余额：truffle(default)&gt; metacoin.getBalance.call(web3.eth.accounts[0]) 应该返回10000，因为在MetaCoin的构造函数中将合约创建者的初始值设为了10000。 接下来从第一个账户往第二个账户转30个MetaCoin：truffle(default)&gt; metacoin.sendCoin.sendTransaction(web3.eth.accounts[1],30,&#123;from:web3.eth.accounts[0]&#125;) 上面调用sendCoin会向区块链发送一笔交易，需要节点挖矿使交易生效。 转账成功后再查看两个账户的余额是否发生了变化：truffle(default)&gt; metacoin.getBalance.call(web3.eth.accounts[0])truffle(default)&gt; metacoin.getBalance.call(web3.eth.accounts[1]) 执行完后发现accounts[0]的余额变成了9970，accounts[1]的余额变成了30，说明转账成功了。输入.exit可以退出truffle控制台。 运行单元测试Truffle集成了nodejs测试框架Chai(https://github.com/chaijs/chai)，我们可以使用nodejs内置的断言模块assert对合约进行测试。在test/目录下编写合约的测试脚本，然后通过 truffle test 命令执行脚本：$ truffle test]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[以太坊开发实战：私有链搭建操作指南]]></title>
      <url>%2Fposts%2Fe47700bb%2F</url>
      <content type="text"><![CDATA[虽然以太坊是一个公有链系统，但是我们可以通过设置一些参数来运行自己的私有链节点，在自己的私有链上进行开发和测试不需要同步公有链数据，也不需要花钱来买以太币，节省存储空间和成本，而且很灵活很方便。本文介绍使用geth客户端搭建私有链的操作步骤，同时会解释在这个过程中用到的各个命令及选项的含义和作用，最后会介绍geth的Javascript Console中的一些常用功能。 系统和软件 Ubuntu 16.04 64位 geth 1.5.6 =&gt;(安装教程) 搭建私有链一、准备创世区块配置文件以太坊支持自定义创世区块，要运行私有链，我们就需要定义自己的创世区块，创世区块信息写在一个json格式的配置文件中。首先将下面的内容保存到一个json文件中，例如genesis.json。&#123; "coinbase" : "0x0000000000000000000000000000000000000000", "difficulty" : "0x400", "extraData" : "0x0", "gasLimit" : "0x2fefd8", "nonce" : "0xdeadbeefdeadbeef", "mixhash" : "0x0000000000000000000000000000000000000000000000000000000000000000", "parentHash" : "0x0000000000000000000000000000000000000000000000000000000000000000", "timestamp" : "0x00", "alloc" : &#123;&#125;&#125; 二、初始化：写入创世区块准备好创世区块配置文件后，需要初始化区块链，将上面的创世区块信息写入到区块链中。首先要新建一个目录用来存放区块链数据，假设新建的数据目录为~/privatechain/data0，genesis.json保存在~/privatechain中，此时目录结构应该是这样的：privatechain├── data0└── genesis.json 接下来进入privatechain中，执行初始化命令：$ cd privatechain$ geth --datadir data0 init genesis.json 上面的命令的主体是geth init，表示初始化区块链，命令可以带有选项和参数，其中--datadir选项后面跟一个目录名，这里为data0，表示指定数据存放目录为data0，genesis.json是init命令的参数。 运行上面的命令，会读取genesis.json文件，根据其中的内容，将创世区块写入到区块链中。如果看到以下的输出内容，说明初始化成功了。I0322 10:52:44.585282 cmd/geth/chaincmd.go:131] successfully wrote genesis block and/or chain rule set: b240e0678c2a8f87cf350225b528e3d97688aad6d4d84ee84e405c7fc9e37e4e 初始化成功后，会在数据目录data0中生成geth和keystore两个文件夹，此时目录结构如下：privatechain├── data0│ ├── geth│ │ └── chaindata│ │ ├── 000002.log│ │ ├── CURRENT│ │ ├── LOCK│ │ ├── LOG│ │ └── MANIFEST-000003│ └── keystore└── genesis.json 其中geth/chaindata中存放的是区块数据，keystore中存放的是账户数据。 三、启动私有链节点初始化完成后，就有了一条自己的私有链，之后就可以启动自己的私有链节点并做一些操作，在终端中输入以下命令即可启动节点：$ geth --datadir data0 --networkid 1108 console 上面命令的主体是geth console，表示启动节点并进入交互式控制台，--datadir选项指定使用data0作为数据目录，--networkid选项后面跟一个数字，这里是1108，表示指定这个私有链的网络id为1108。网络id在连接到其他节点的时候会用到，以太坊公网的网络id是1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络id。 运行上面的命令后，就启动了区块链节点并进入了Javascript Console：...Welcome to the Geth JavaScript console!instance: Geth/v1.5.6-stable/linux/go1.7.3 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0&gt; 这是一个交互式的Javascript执行环境，在这里面可以执行Javascript代码，其中&gt;是命令提示符。在这个环境里也内置了一些用来操作以太坊的Javascript对象，可以直接使用这些对象。这些对象主要包括： eth：包含一些跟操作区块链相关的方法 net：包含以下查看p2p网络状态的方法 admin：包含一些与管理节点相关的方法 miner：包含启动&amp;停止挖矿的一些方法 personal：主要包含一些管理账户的方法 txpool：包含一些查看交易内存池的方法 web3：包含了以上对象，还包含一些单位换算的方法 探索Javascript Console进入以太坊Javascript Console后，就可以使用里面的内置对象做一些操作，这些内置对象提供的功能很丰富，比如查看区块和交易、创建账户、挖矿、发送交易、部署智能合约等。 接下来介绍几个常用功能，下面的操作中，前面带&gt;的表示在Javascript Console中执行的命令。 一、创建账户前面只是搭建了私有链，并没有自己的账户，可以在js console中输入eth.accounts来验证：&gt; eth.accounts[] 接下来使用personal对象来创建一个账户：&gt; personal.newAccount()Passphrase: Repeat passphrase: "0xc232e2add308136571bb8f9197ba4ae4e5ba9836" 会提示输入密码和确认密码，输入密码不会有显示，只要输入就可以了，之后就会显示新创建的账户地址。 可以创建多个账户，我们再来创建一个账户：&gt; personal.newAccount()Passphrase: Repeat passphrase: "0x814d39aa21f3eed069f2b21da7b5f857f7343afa" 接下来就可以查看到刚才创建的两个账户了：&gt; eth.accounts["0xc232e2add308136571bb8f9197ba4ae4e5ba9836", "0x814d39aa21f3eed069f2b21da7b5f857f7343afa"] 账户默认会保存在数据目录的keystore文件夹中。查看目录结构，发现data0/keystore中多了两个文件，这两个文件就对应刚才创建的两个账户，这是json格式的文本文件，可以打开查看，里面存的是私钥经过密码加密后的信息。data0├── geth│ ├── chaindata│ ├── LOCK│ ├── nodekey│ └── nodes├── geth.ipc├── history└── keystore ├── UTC--2017-03-22T09-06-47.766993033Z--c232e2add308136571bb8f9197ba4ae4e5ba9836 └── UTC--2017-03-22T09-09-42.041015656Z--814d39aa21f3eed069f2b21da7b5f857f7343afa 小提示：命令都可以按Tab键自动补全。 二、查看账户余额eth对象提供了查看账户余额的方法：&gt; eth.getBalance(eth.accounts[0])0&gt; eth.getBalance(eth.accounts[1])0 目前两个账户的以太币余额都是0，要使账户有余额，可以从其他账户转账过来，或者通过挖矿来获得以太币奖励。 三、启动&amp;停止挖矿通过miner.start()来启动挖矿：&gt; miner.start(1) 其中start的参数表示挖矿使用的线程数。第一次启动挖矿会先生成挖矿所需的DAG文件，这个过程有点慢，等进度达到100%后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。 如果想停止挖矿，在js console中输入miner.stop()：&gt; miner.stop() 注意：输入的字符会被挖矿刷屏信息冲掉，没有关系，只要输入完整的miner.stop()之后回车，即可停止挖矿。 挖到一个区块会奖励5个以太币，挖矿所得的奖励会进入矿工的账户，这个账户叫做coinbase，默认情况下coinbase是本地账户中的第一个账户：&gt; eth.coinbase"0xc232e2add308136571bb8f9197ba4ae4e5ba9836" 现在的coinbase是账户0，要想使挖矿奖励进入其他账户，通过miner.setEtherbase()将其他账户设置成coinbase即可：&gt; miner.setEtherbase(eth.accounts[1])true&gt; eth.coinbase"0x814d39aa21f3eed069f2b21da7b5f857f7343afa" 我们还是以账户0作为coinbase，挖到区块以后，账户0里面应该就有余额了：&gt; eth.getBalance(eth.accounts[0])160000000000000000000 getBalance()返回值的单位是wei，wei是以太币的最小单位，1个以太币=10的18次方个wei。要查看有多少个以太币，可以用web3.fromWei()将返回值换算成以太币：&gt; web3.fromWei(eth.getBalance(eth.accounts[0]),'ether')160 四、发送交易目前，账户一的余额还是0：&gt; eth.getBalance(eth.accounts[1])0 可以通过发送一笔交易，从账户0转移5个以太币到账户1：&gt; amount = web3.toWei(5,'ether')"5000000000000000000"&gt; eth.sendTransaction(&#123;from:eth.accounts[0],to:eth.accounts[1],value:amount&#125;)Error: account is locked at web3.js:3119:20 at web3.js:6023:15 at web3.js:4995:36 at &lt;anonymous&gt;:1:1 这里报错了，原因是账户每隔一段时间就会被锁住，要发送交易，必须先解锁账户，由于我们要从账户0发送交易，所以要解锁账户0：&gt; personal.unlockAccount(eth.accounts[0])Unlock account 0xc232e2add308136571bb8f9197ba4ae4e5ba9836Passphrase: true 输入创建账户时设置的密码，就可以成功解锁账户。然后再发送交易：&gt; amount = web3.toWei(5,'ether')"5000000000000000000"&gt; eth.sendTransaction(&#123;from:eth.accounts[0],to:eth.accounts[1],value:amount&#125;)I0322 19:39:36.300675 internal/ethapi/api.go:1047] Tx(0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825) to: 0x814d39aa21f3eed069f2b21da7b5f857f7343afa"0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825" 此时交易已经提交到区块链，返回了交易的hash，但还未被处理，这可以通过查看txpool来验证：&gt; txpool.status&#123; pending: 1, queued: 0&#125; 其中有一条pending的交易，pending表示已提交但还未被处理的交易。 要使交易被处理，必须要挖矿。这里我们启动挖矿，然后等待挖到一个区块之后就停止挖矿：&gt; miner.start(1);admin.sleepBlocks(1);miner.stop(); 当miner.stop()返回true后，txpool中pending的交易数量应该为0了，说明交易已经被处理了：&gt; txpool.status&#123; pending: 0, queued: 0&#125; 此时，交易已经生效，账户一应该已经收到了5个以太币了：&gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')5 五、查看交易和区块eth对象封装了查看交易和区块信息的方法。 查看当前区块总数：&gt; eth.blockNumber33 通过交易hash查看交易：&gt; eth.getTransaction("0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825")&#123; blockHash: "0xf5d3da50065ce5793c9571a031ad6fe5f1af326a3c4fb7ce16458f4d909c1613", blockNumber: 33, from: "0xc232e2add308136571bb8f9197ba4ae4e5ba9836", gas: 90000, gasPrice: 20000000000, hash: "0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825", input: "0x", nonce: 0, r: "0x433fe5845391b6da3d8aa0d2b53674e09fb6126f0070a600686809b57e4ef77d", s: "0x6b0086fb76c46024f849141074a5bc79c49d5f9a658fd0fedbbe354889c34d8d", to: "0x814d39aa21f3eed069f2b21da7b5f857f7343afa", transactionIndex: 0, v: "0x1b", value: 5000000000000000000&#125; 通过区块号查看区块：&gt; eth.getBlock(33)&#123; difficulty: 132928, extraData: "0xd783010506846765746887676f312e372e33856c696e7578", gasLimit: 3244382, gasUsed: 21000, hash: "0xf5d3da50065ce5793c9571a031ad6fe5f1af326a3c4fb7ce16458f4d909c1613", logsBloom: "0xminer: "0xc232e2add308136571bb8f9197ba4ae4e5ba9836", mixHash: "0x09849dff7c8b8467812fa80d1fa2a27bc61f1cf16d5b2c05a6ce1b77ee18f3f1", nonce: "0x5b3939449dbdbea0", number: 33, parentHash: "0xeca34637642f56f7cfe5b699031c7ddbc43aee00fb10c7f054e0a9719cf226da", receiptsRoot: "0xd5f5b7ee944e57cbff496f7bdda7ceffd5eedffe6d5be5320008190502adc07a", sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347", size: 649, stateRoot: "0xc7add6b756980ab9e482766e455597ef1583e747ad62e2924a8e66c6f9170112", timestamp: 1490183209, totalDifficulty: 4358016, transactions: ["0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825"], transactionsRoot: "0x7335a362b2c3925e7ba1b41bf7772aa9645a13d4f9c12edd5892b87887264232", uncles: []&#125; 还有更多的功能请自行探索…。 六、连接到其他节点可以通过admin.addPeer()方法连接到其他节点，两个节点要想联通，必须保证网络是相通的，并且要指定相同的networkid。 假设有两个节点：节点一和节点二，networkid都是1108，通过下面的步骤就可以从节点一连接到节点二。 首先要知道节点二的enode信息，在节点二的js console中执行下面的命令查看enode信息：&gt; admin.nodeInfo.enode"enode://9e86289ea859ca041f235aed87a091d0cd594b377cbe13e1c5f5a08a8a280e62d4019ac54063ed6a1d0e3c3eaedad0b73c40b99a16a176993f0373ffe92be672@[::]:30304" 然后在节点一的js console中执行admin.addPeer()，就可以连接到节点二：&gt; admin.addPeer("enode://9e86289ea859ca041f235aed87a091d0cd594b377cbe13e1c5f5a08a8a280e62d4019ac54063ed6a1d0e3c3eaedad0b73c40b99a16a176993f0373ffe92be672@127.0.0.1:30304") addPeer()的参数就是节点二的enode信息，注意要把enode中的[::]替换成节点二的IP地址。连接成功后，节点二就会开始同步节点一的区块，同步完成后，任意一个节点开始挖矿，另一个节点会自动同步区块，向任意一个节点发送交易，另一个节点也会收到该笔交易。 通过admin.peers可以查看连接到的其他节点信息，通过net.peerCount可以查看已连接到的节点数量。 除了上面的方法，也可以在启动节点的时候指定--bootnodes选项连接到其他节点。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[以太坊开发实战：geth客户端安装]]></title>
      <url>%2Fposts%2F4c678d5d%2F</url>
      <content type="text"><![CDATA[geth是以太坊的官方客户端，它是一个命令行工具，提供很多命令和选项，可以运行以太坊节点、创建和管理账户、发送交易、挖矿、部署智能合约等。 下面介绍geth的三种安装方法： 直接下载可执行文件 在线安装 从源码编译安装 方法一 直接下载可执行文件最简单的方法是直接下载可执行文件，以太坊开发团队提供了各个系统的编译好的geth可执行文件，可以去官方下载地址或国内镜像下载适合你系统版本的压缩包，解压缩后直接运行就可以。在命令行中输入 geth help 可查看geth的用法。 注意1：geth是一个命令行工具，需要在命令行中运行geth，windows用户不要直接双击geth.exe。注意2：如果不加任何参数直接运行 geth ，会自动连接到以太坊公网，此时会开始同步区块，在Linux系统中，区块数据默认存储在~/.ethereum中。 方法二 在线安装Ubuntu用户可以选择在线安装的方式，在终端中依次执行以下命令即可：$ sudo add-apt-repository -y ppa:ethereum/ethereum$ sudo apt-get update$ sudo apt-get install ethereum 安装完成后执行 geth help 查看geth的用法。 方法三 从源码编译安装编译安装推荐使用Linux系统，本文以64位的Ubuntu14.04系统为例。geth是用go语言写的，编译geth源码需要go语言和C语言编译器，因此需要先安装go语言，go语言版本推荐用go1.7及以上。 使用make编译首先下载geth源码 go-ethereum，这里以 go-ethereum-1.5.6.tar.gz 为例： 接下来解压缩源码：$ tar -xzf go-ethereum-1.5.6.tar.gz 用make工具进行编译：$ cd go-ethereum-1.5.6$ make geth make会执行build目录下的编译脚本，编译脚本会调用go语言编译器进行编译。等待十几秒，编译就完成了，此时会在 go-ethereum-1.5.6/build/bin 中生成geth可执行文件。 输入 geth help 命令，会显示geth所有的命令和选项：$ cd build/bin$ ./geth help 使用go语言编译工具编译如果熟悉go语言，可以直接使用go语言的编译工具编译。 首先下载go-ethereum项目源码：$ go get -d github.com/ethereum/go-ethereum 上面的命令会下载go-ethereum源码到GOPATH/src/github.com/ethereum/go-ethereum，同时会下载相关的依赖包，在国内网络环境下，如果不翻墙，下载通常会失败，此时可以参考下面的手动下载方法。 下载完成后，通过以下命令编译：$ go install -v github.com/ethereum/go-ethereum/cmd/geth 等待十几秒，编译完成后，会在GOPATH/bin目录下生成geth可执行文件。 注：如果go get命令下载很慢或失败，可以采用手动下载：首先下载 go-ethereum-1.5.6.tar.gz ，然后解压到GOPATH/src/github.com/ethereum/go-ethereum，还要到http://www.golangtc.com/download/package下载golang.org.x.net.tar.gz，并将其解压到GOPATH/src中。解压之后的目录结构应该是这样的：GOPATH/src├── github.com│ └── ethereum│ └── go-ethereum└── golang.org └── x └── net 之后再通过上面的go install命令编译安装即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Go语言安装教程]]></title>
      <url>%2Fposts%2F1c3f4ffd%2F</url>
      <content type="text"><![CDATA[Go语言是由Google的三位工程师开发的一种静态类型、编译型、具有垃圾回收功能的编程语言，于2009年正式发布，从2015年开始迅速流行起来。Go的语言特性简单，易学易用，是一种比较轻量级的语言，有C语言基础的人很容易上手，它具有独特的并发机制，非常容易写出高并发的程序，并且标准库中有丰富的网络库、各种编码/解码库、加密算法库等，开发非常方便。著名的Docker容器就是Go语言写的，近一两年流行的区块链技术中的代表者以太坊和HyperLedger也是用Go语言写的。 下面介绍在Linux和Windows系统上安装Go语言的步骤。 首先下载安装包，可以去go语言官网下载，如果没有翻墙，可以去go语言中文网下载对应系统的安装包，目前go语言最新版本是1.8，本文以1.7.3版本为例。 Linux系统安装方法以64位Ubuntu14.04为例： 一、下载安装包 下载安装包 go1.7.3.linux-amd64.tar.gz 二、解压缩到/usr/local $ sudo tar -C /usr/local -xzf go1.7.3.linux-amd64.tar.gz 这会将go语言安装到 /usr/local/go 中 三、添加到环境变量 将/usr/local/go/bin添加到PATH环境变量中，编辑~/.bashrc文件，在文件最后加入下面一行代码：export PATH=$PATH:/usr/local/go/bin 四、设置GOPATH GOPATH用于指定系统中的一个目录，go语言的所有项目都放在这个目录中，比如我想把go语言项目都放在$HOME/work中，那就把GOPATH设置成这个目录：export GOPATH=$HOME/work 将上面一行代码添加到~/.bashrc中即可 最后，别忘了执行以下命令使修改后的~/.bashrc生效：$ source ~/.bashrc 在命令行中执行 go version 命令，如果输出版本信息，则安装成功。 Windows系统安装方法以64位win10为例： 一、下载安装程序 下载安装程序 go1.7.3.windows-amd64.msi 并安装 二、设置GOPATH “我的电脑”-&gt;右键“属性”-&gt;“高级系统设置”-&gt;“环境变量”，在系统变量那选择“新建”，输入变量名GOPATH，变量值D:\mygo，保存即可，其中变量值可以随意指定一个空目录作为go项目的根目录。 在命令行执行 go env 命令 可以查看GOPATH是否正确设置。 查看文档在命令行中执行 godoc -http=:6060 ,会在本机启动go语言文档服务器，不要关闭命令行窗口，在浏览器地址栏输入 http://localhost:6060/ 即可在本地查看go语言的文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2Fposts%2F4a17b156%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
